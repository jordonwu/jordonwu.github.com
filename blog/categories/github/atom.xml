<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | Jordon Wu's Blog]]></title>
  <link href="http://jordonwu.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://jordonwu.github.io/"/>
  <updated>2015-10-09T15:24:01+08:00</updated>
  <id>http://jordonwu.github.io/</id>
  <author>
    <name><![CDATA[Jordon Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[sync a fork of a repository to keep it up-to-date with the upstream repository]]></title>
    <link href="http://jordonwu.github.io/blog/2015/06/10/sync-a-fork-of-a-repository-to-keep-it-up-to-date-with-the-upstream-repository/"/>
    <updated>2015-06-10T15:05:40+08:00</updated>
    <id>http://jordonwu.github.io/blog/2015/06/10/sync-a-fork-of-a-repository-to-keep-it-up-to-date-with-the-upstream-repository</id>
    <content type="html"><![CDATA[<h1>1. Configuring a remote for a fork</h1>

<p>To sync changes you make in a fork with the original repository, you must configure a remote that points to the upstream repository in Git.</p>

<h2>1.1 Open Terminal (for Mac users) or the command prompt (for Windows and Linux users)</h2>

<h2>1.2 List the current configured remote repository for your fork</h2>

<pre><code>$ git remote -v
  origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
  origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
</code></pre>

<h2>1.3 Specify a new remote upstream repository that will be synced with the fork</h2>

<pre><code>$ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git
</code></pre>

<h2>1.4 Verify the new upstream repository you&rsquo;ve specified for your fork</h2>

<pre><code>$ git remote -v
  origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
  origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
  upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)
  upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)
</code></pre>

<h1>2. Syncing a fork</h1>

<p>Sync a fork of a repository to keep it up-to-date with the upstream repository</p>

<p>2.1 Change the current working directory to your local project</p>

<p>2.2 Fetch the branches and their respective commits from the upstream repository. Commits to master will be stored in a local branch, upstream/master.</p>

<pre><code>$ git fetch upstream
  remote: Counting objects: 75, done.
  remote: Compressing objects: 100% (53/53), done.
  remote: Total 62 (delta 27), reused 44 (delta 9)
  Unpacking objects: 100% (62/62), done.
  From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY
   * [new branch]      master     -&gt; upstream/master
</code></pre>

<p>2.3 Check out your fork&rsquo;s local master branch</p>

<pre><code>$ git checkout master
  Switched to branch 'master'
</code></pre>

<p>2.4 Merge the changes from upstream/master into your local master branch. This brings your fork&rsquo;s master branch into sync with the upstream repository, without losing your local changes.</p>

<pre><code>$ git merge upstream/master
  Updating a422352..5fdff0f
  Fast-forward
  README                    |    9 -------
  README.md                 |    7 ++++++
  2 files changed, 7 insertions(+), 9 deletions(-)
  delete mode 100644 README
  create mode 100644 README.md
</code></pre>

<p>2.5 If your local branch didn&rsquo;t have any unique commits, Git will instead perform a &ldquo;fast-forward&rdquo;:</p>

<pre><code>$ git merge upstream/master
  Updating 34e91da..16c56ad
  Fast-forward
  README.md                 |    5 +++--
  1 file changed, 3 insertions(+), 2 deletions(-)
</code></pre>

<h1>3. Pushing to a remote</h1>

<pre><code>$ git push  &lt;REMOTENAME&gt; &lt;BRANCHNAME&gt;   
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding an existing project to Github]]></title>
    <link href="http://jordonwu.github.io/blog/2015/05/26/adding-an-existing-project-to-github/"/>
    <updated>2015-05-26T08:12:55+08:00</updated>
    <id>http://jordonwu.github.io/blog/2015/05/26/adding-an-existing-project-to-github</id>
    <content type="html"><![CDATA[<p>Ref: <a href="https://help.github.com/articles/pushing-to-a-remote/">https://help.github.com/articles/pushing-to-a-remote/</a></p>

<h1>1. Create a new repository on Github</h1>

<pre><code>Example repo: https://github.com/github-username/test-repo.git

#To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub
</code></pre>

<h1>2. Create a local repository on local machine</h1>

<pre><code>$ mkdir test-repo
$ cd test-repo
$ git init
$ git config --global user.name "Your Name"         # remove --global for current git reop only
$ git config --global user.email you@example.com    # remove --global for current git reop only
$ git config --list                                 # list config
$ touch test.txt
$ git add .
$ git commit -m "First commit"
</code></pre>

<h1>3. Adding a remote repository url to local repository</h1>

<pre><code>$ git remote -v

$ git remote add origin https://github.com/github-username/test-repo.git
or
$ git remote set-url origin https://github.com/github-username/test-repo.git    # for windows git command

$ git remote -v
    origin  https://github.com/github-username/test-repo.git (fetch)
    origin  https://github.com/github-username/test-repo.git (push)
</code></pre>

<h1>4. Push the changes in your local repository to Github</h1>

<pre><code>$ git push origin master
</code></pre>

<h1>5. Renaming branches (remote)</h1>

<p>To rename a branch, you&rsquo;d use the same git push command, but you would add one more argument: the name of the new branch. For example:</p>

<pre><code>git push  &lt;REMOTENAME&gt; &lt;LOCALBRANCHNAME&gt;:&lt;REMOTEBRANCHNAME&gt;
</code></pre>

<p>This pushes the LOCALBRANCHNAME to your REMOTENAME, but it is renamed to REMOTEBRANCHNAME.</p>

<h1>6. Pushing tags</h1>

<p>By default, and without additional parameters, git push sends all matching branches that have the same names as remote branches.</p>

<p>To push a single tag, you can issue the same command as pushing a branch:</p>

<pre><code>git push  &lt;REMOTENAME&gt; &lt;TAGNAME&gt;
</code></pre>

<p>To push all your tags, you can type the command:</p>

<pre><code>git push  &lt;REMOTENAME&gt; --tags
</code></pre>

<h1>7. Deleting a remote branch or tag</h1>

<p>The syntax to delete a branch is a bit arcane at first glance:</p>

<pre><code>git push  &lt;REMOTENAME&gt; :&lt;BRANCHNAME&gt; 
</code></pre>

<p>Note that there is a space before the colon. The command resembles the same steps you&rsquo;d take to rename a branch. However, here, you&rsquo;re telling Git to push nothing into BRANCHNAME on REMOTENAME. Because of this, git push deletes the branch on the remote repository.</p>

<h2>7.1 Deleting your master branch</h2>

<p>You’ve forked some project on github.</p>

<p>You clone your fork.</p>

<p>Now you’ve got a master branch. It’s the master branch of your fork.</p>

<p>It can be tempting to do work in the master branch and ask for a pull request.</p>

<p>That is best avoided because:</p>

<p>It’s natural to carry on working in your master and that will pollute your pull request with other commits
master is not a descriptive name for a set of changes. It’s easier for the person reviewing your code to have something like fix-for-issue-12.
You may well also have a tracking branch pointing to the main upstream repo. You might call that something like upstream-master. It’s easy to lose concentration and forget you are on upstream-master instead of your master, and nasty errors can result.
To avoid this, I delete the master branch from my forked copy. However, to make that work, you have to tell github not to monitor your master branch.</p>

<h2>7.2 How to delete master</h2>

<p>First you delete master in your local clone. To do this we first make a new branch called placeholder or similar, and delete master from there:</p>

<pre><code>git branch placeholder
git checkout placeholder
git branch -D master
</code></pre>

<p>All good so far. We next want to delete the branch on github. However, if we do this the naive way:</p>

<pre><code>git push origin :master
</code></pre>

<p>we just get an error like this:</p>

<pre><code>remote: error: refusing to delete the current branch: refs/heads/master
To git@github.com:matthew-brett/datarray.git
! [remote rejected] master (deletion of the current branch prohibited)
error: failed to push some refs to 'git@github.com:matthew-brett/datarray.git'
</code></pre>

<p>That is because github is looking at the master branch to provide the web content when you browse that repository. So we first have to make github look at our placeholder branch instead, then delete master.</p>

<p>First push up the placeholder branch:</p>

<pre><code>git checkout placeholder # if not on placeholder already
git push origin placeholder
</code></pre>

<p>Then set placeholder to be the github default branch. Go to the main github page for your forked repository, and click on the “Admin” button.</p>

<p>There’s a “Default branch” dropdown list near the top of the screen. From there, select placeholder. On the interface I’m looking at, a green tick appears above the dropdown list. Now you can do (from the command line):</p>

<pre><code>git push origin :master
</code></pre>

<p>and - no master branch&hellip;</p>

<h1>8. Remotes and forks</h1>

<p>You might already know that you can &ldquo;fork&rdquo; repositories on GitHub.</p>

<p>When you clone a repository you own, you provide it with a remote URL that tells Git where to fetch and push updates. If you want to collaborate with the original repository, you&rsquo;d add a new remote URL, typically called upstream, to your local Git clone:</p>

<pre><code>git remote set-url upstream  &lt;THEIR_REMOTE_URL&gt;
</code></pre>

<p>Now, you can fetch updates and branches from their fork:</p>

<pre><code>git fetch upstream branch
# Grab the upstream remote's branches
# remote: Counting objects: 75, done.
# remote: Compressing objects: 100% (53/53), done.
# remote: Total 62 (delta 27), reused 44 (delta 9)
# Unpacking objects: 100% (62/62), done.
# From https://github.com/octocat/repo
#  * [new branch]      master     -&gt; upstream/master
</code></pre>

<p>When you&rsquo;re done making local changes, you can push your local branch to GitHub and initiate a pull request.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Install and Usage on Windows 7]]></title>
    <link href="http://jordonwu.github.io/blog/2015/04/14/install-octopress-on-windows-7/"/>
    <updated>2015-04-14T09:15:12+08:00</updated>
    <id>http://jordonwu.github.io/blog/2015/04/14/install-octopress-on-windows-7</id>
    <content type="html"><![CDATA[<h2>1.   Install git</h2>

<pre><code>    Version : Git-1.9.2-preview20140411.exe
</code></pre>

<h2>2.   Install RubyInstaller</h2>

<pre><code>    Version: rubyinstaller-2.1.5-x64
</code></pre>

<h2>3.   Add Ruby install path(Example: D:\Ruby\Ruby21-x64\bin) to user&rsquo;s PATH Environment Variable</h2>

<h2>4.   Install RubyInstaller DevKit</h2>

<pre><code>    Version: DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe
</code></pre>

<h2>5.   RubyInstaller DevKit configure</h2>

<h3>5.1 change to DevKit install dir</h3>

<pre><code>    D:\&gt; cd d:\Ruby\DevKit
</code></pre>

<h3>5.2 ruby dk.rb init</h3>

<pre><code>    d:\Ruby\DevKit&gt; ruby dk.rb init

    Initialization complete! Please review and modify the auto-generated
    'config.yml' file to ensure it contains the root directories to all
    of the installed Rubies you want enhanced by the DevKit.

    Add Ruby install path to config.yml as below

    #####################################################################
    #
    # Example:
    #
    # ---
    # - C:/ruby19trunk
    # - C:/ruby192dev
    #

    - D:\Ruby\Ruby21-x64        

    ######################################################################
</code></pre>

<h3>5.3 ruby dk.rb install</h3>

<pre><code>    d:\Ruby\DevKit&gt; ruby dk.rb install
</code></pre>

<h2>6.   Change ruby sources to <a href="http://ruby.taobao.org/">http://ruby.taobao.org/</a></h2>

<pre><code>    D:\&gt; cd d:\Ruby\DevKit

    d:\Ruby\DevKit&gt; gem sources --remove http://rubygems.org/

    d:\Ruby\DevKit&gt; gem sources --remove https://rubygems.org/

    d:\Ruby\DevKit&gt; gem sources -a http://ruby.taobao.org/

    d:\Ruby\DevKit&gt; gem sources -l

    *** CURRENT SOURCES ***

    http://ruby.taobao.org/
</code></pre>

<h2>7.   Install rdoc and bundler</h2>

<pre><code>    D:\&gt; cd d:\Ruby\DevKit

    d:\Ruby\DevKit&gt;gem install rdoc bundler

    Depending on your version of ruby, you may need to install ruby rdoc/ri data:

    &lt;= 1.8.6 : unsupported
     = 1.8.7 : gem install rdoc-data; rdoc-data --install
     = 1.9.1 : gem install rdoc-data; rdoc-data --install
    &gt;= 1.9.2 : nothing to do! Yay!
    Successfully installed rdoc-4.2.0
    Parsing documentation for rdoc-4.2.0
    Done installing documentation for rdoc after 5 seconds
    Successfully installed bundler-1.9.3
    Parsing documentation for bundler-1.9.3
    Done installing documentation for bundler after 2 seconds
    2 gems installed
</code></pre>

<h2>8    Install Octopress blog if you first using it on github</h2>

<h3>8.1 Create repo on your github</h3>

<pre><code>    Create a repo named username.github.com.git on your github
</code></pre>

<h3>8.2 Clone octopress.git</h3>

<pre><code>    $ git clone git://github.com/imathis/octopress.git username.github.com
</code></pre>

<h3>8.3 Modify octopress GEM Source</h3>

<pre><code>    $cd username.github.com

    $edit Gemfile  and change source "http://rubygems.org/"  to source "http://ruby.taobao.org/" 

    source "http://ruby.taobao.org/"
</code></pre>

<h3>8.4 Install GEM component</h3>

<pre><code>    $ bundle install

    DL is deprecated, please use Fiddle
    Fetching source index from http://ruby.taobao.org/
    Resolving dependencies...............
    Installing rake 10.4.2
    Using RedCloth 4.2.9
    Installing blankslate 2.1.2.4
    Installing hitimes 1.2.2
    Installing timers 4.0.1
    Installing celluloid 0.16.0
    Using chunky_png 1.3.4
    Using fast-stemmer 1.0.2
    Installing classifier-reborn 2.0.3
    Installing coffee-script-source 1.9.1.1
    Installing execjs 2.5.2
    Installing coffee-script 2.4.1
    Installing colorator 0.1
    Installing multi_json 1.11.0
    Installing sass 3.4.13
    Installing compass-core 1.0.3
    Installing compass-import-once 1.0.5
    Using rb-fsevent 0.9.4
    Installing ffi 1.9.8
    Installing rb-inotify 0.9.5
    Installing compass 1.0.3
    Using tilt 2.0.1
    Installing haml 4.0.6
    Installing jekyll-coffeescript 1.0.1
    Installing jekyll-gist 1.2.1
    Installing jekyll-paginate 1.1.0
    Installing jekyll-sass-converter 1.3.0
    Installing listen 2.10.0
    Installing jekyll-watch 1.2.1
    Installing kramdown 1.6.0
    Installing liquid 2.6.2
    Installing mercenary 0.3.5
    Using posix-spawn 0.3.11
    Installing yajl-ruby 1.2.1
    Installing pygments.rb 0.6.3
    Installing redcarpet 3.2.3
    Installing safe_yaml 1.0.4
    Installing parslet 1.5.0
    Installing toml 0.1.2
    Installing jekyll 2.5.3
    Installing jekyll-sitemap 0.8.1
    Installing octopress-hooks 2.6.0
    Installing octopress-date-format 2.0.2
    Using rack 1.6.0
    Using rack-protection 1.5.3
    Installing rdiscount 2.1.8
    Using rubypants 0.2.0
    Using sass-globbing 1.0.0
    Using sinatra 1.4.6
    Using stringex 1.4.0
    Using bundler 1.9.3
    Bundle complete! 14 Gemfile dependencies, 51 gems now installed.
    Use `bundle show [gemname]` to see where a bundled gem is installed.
    Post-install message from compass:
        Compass is charityware. If you love it, please donate on our behalf at http://umdf.org/compass Thanks!
    Post-install message from haml:

    HEADS UP! Haml 4.0 has many improvements, but also has changes that may break
    your application:

    * Support for Ruby 1.8.6 dropped
    * Support for Rails 2 dropped
    * Sass filter now always outputs &lt;style&gt; tags
    * Data attributes are now hyphenated, not underscored
    * html2haml utility moved to the html2haml gem
    * Textile and Maruku filters moved to the haml-contrib gem

    For more info see:

    http://rubydoc.info/github/haml/haml/file/CHANGELOG.md
</code></pre>

<h3>8.5 Install Octopress template file</h3>

<pre><code>    $ rake install

    rake aborted!
    You have already activated rake 10.1.0, but your Gemfile requires rake 0.9.6. Prepending `bundle exec` to your command may solve this.
    e:/study/username.github.com/Rakefile:2:in `&lt;top (required)&gt;'
    (See full trace by running task with --trace)


    #add "aliasalias rake='bundle exec rake'" to git bash bash_profile if display error as above

    $ echo "alias rake='bundle exec rake'" &gt;&gt; ~/.bash_profile

    $ . ~/.bash_profile
    $ aliasalias rake='bundle exec rake'
    $ rake install
</code></pre>

<h3>8.6 setup octopress and github</h3>

<pre><code>    $ cd username.github.com.git
    $ rake setup_github_pages       #you need input username and password of you github account and blog url(https://github.com/username/username.github.com.git)
</code></pre>

<h2>9    Clone your Octopress if you had used it on github</h2>

<h3>9.1 Clone your Octopress repo</h3>

<pre><code>    $ git clone -b source https://github.com/username/username.github.com.git username.github.com.git   # replace username using yours

    Cloning into 'username.github.com'...
    remote: Counting objects: 5279, done.
    remote: Total 5279 (delta 0), reused 0 (delta 0), pack-reused 5279R
    Receiving objects: 100% (5279/5279), 1.37 MiB | 129.00 KiB/s, done.
    Resolving deltas: 100% (2537/2537), done.
    Checking connectivity... done.

    $ git clone -b master https://github.com/username/username.github.com.git _deploy  # replace username using yours
</code></pre>

<h3>9.2 Install Octopress GEM component</h3>

<pre><code>    $ cd username.github.com.git

    $ bundle install

    DL is deprecated, please use Fiddle
    Fetching source index from http://ruby.taobao.org/
    Resolving dependencies...
    Installing rake 0.9.2.2
    Installing RedCloth 4.2.9
    Installing chunky_png 1.2.5
    Installing fast-stemmer 1.0.1
    Installing classifier 1.3.3
    Installing fssm 0.2.9
    Installing sass 3.2.9
    Installing compass 0.12.2
    Installing directory_watcher 1.4.1
    Installing haml 3.1.7
    Installing kramdown 0.13.8
    Installing liquid 2.3.0
    Installing syntax 1.0.0
    Installing maruku 0.6.1
    Installing posix-spawn 0.3.6
    Installing yajl-ruby 1.1.0
    Installing pygments.rb 0.3.4
    Installing jekyll 0.12.0
    Installing rack 1.5.2
    Installing rack-protection 1.5.0
    Installing rb-fsevent 0.9.1
    Installing rdiscount 2.0.7.3
    Installing rubypants 0.2.0
    Installing sass-globbing 1.0.0
    Installing tilt 1.3.7
    Installing sinatra 1.4.2
    Installing stringex 1.4.0
    Using bundler 1.9.3
    Bundle complete! 15 Gemfile dependencies, 28 gems now installed.
    Use `bundle show [gemname]` to see where a bundled gem is installed.
</code></pre>

<h2>10   Add a remote name(default is origin) for the repository git@github.com:username/username.github.com.git</h2>

<pre><code>    $ cd username.github.com.git
    $ git remote

    origin

    $ git remote add origin git@github.com:username/username.github.com.git #default name is origin, you can change it       
</code></pre>

<h2>11.  Management blog</h2>

<pre><code>    $ cd username.github.com.git
</code></pre>

<h3>11.1 Add blog</h3>

<pre><code>    $ rake new_post["blog_name"]
</code></pre>

<h3>11.2 Generate static file</h3>

<pre><code>    $ rake generate
</code></pre>

<h3>11.3 Preview blog</h3>

<pre><code>    $ rake preview

    #now you can preview blog using local address on any browser: http://localhost:4000
</code></pre>

<h3>11.4 Deploy blog to github</h3>

<pre><code>    $rake deploy

    #now you can access you blog using github address on any browser: http://username.github.com
</code></pre>

<h2>12. Management blog source code</h2>

<h3>12.1 Add file to local repo</h3>

<pre><code>    $ git add .
</code></pre>

<h3>12.2 Commit file to repo</h3>

<pre><code>    $ git commit -m "commit file comment"
</code></pre>

<h3>12.3 Push local repo file to remote</h3>

<pre><code>    $ git push origin source #origin is local repo name, source is branch name
</code></pre>

<h3>12.4 Pull last remote repo file to local</h3>

<pre><code>    $ git pull orign source
</code></pre>

<h3>12.5 Add a image to your blog</h3>

<pre><code>    1) add image file to source/images folder
    2) add below code to you blog

    ![a brick](../images/a_brick.png "A brick")
</code></pre>

<h3>12.6 Add attach file to your blog</h3>

<pre><code>    1) add attach file to source/images folder
    2) add a hyperlink and link address point to your file(such as ../images/test.txt)
</code></pre>

<p>=<a href="../images/test.txt">Attached file here(test.txt)</a></p>

<h2>13  Enable comment</h2>

<h3>13.1 Register an account on www.disqus.com</h3>

<h3>13.2 Register &ldquo;unique Disqus URL&rdquo; for github blog</h3>

<h3>13.3 Edit _config.yml as below</h3>

<pre><code># Disqus Comments
disqus_short_name: site_short_name_register_on_disqus
disqus_show_comment_count: true
</code></pre>

<h3>13.4 Enable comment on your blog as below</h3>

<pre><code>---
layout: post
title: "title name"
date: 2015-04-15 14:51:54 +0800
comments: true
categories: category1, category2 
---
</code></pre>

<h2>14  Pushing changes from two different machines</h2>

<p>If you want to blog from more than one computer, you need to make sure that you push everything before switching computers. From the first machine do the following whenever you’ve made changes:</p>

<pre><code>$ rake generate
$ git add .
$ git commit -am "Some comment here." 
$ git push origin source  # update the remote source branch 
$ rake deploy             # update the remote master branch
</code></pre>

<p>Then on the other machine, you need to pull those changes.</p>

<pre><code>$ cd octopress
$ git pull origin source  # update the local source branch
$ cd ./_deploy
$ git pull origin master  # update the local master branch
</code></pre>
]]></content>
  </entry>
  
</feed>
