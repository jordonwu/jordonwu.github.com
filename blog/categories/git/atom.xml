<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Jordon Wu's Blog]]></title>
  <link href="http://jordonwu.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://jordonwu.github.io/"/>
  <updated>2015-09-07T21:21:48+08:00</updated>
  <id>http://jordonwu.github.io/</id>
  <author>
    <name><![CDATA[Jordon Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sync a Fork of a Repository to Keep It Up-to-date With the Upstream Repository]]></title>
    <link href="http://jordonwu.github.io/blog/2015/06/10/sync-a-fork-of-a-repository-to-keep-it-up-to-date-with-the-upstream-repository/"/>
    <updated>2015-06-10T15:05:40+08:00</updated>
    <id>http://jordonwu.github.io/blog/2015/06/10/sync-a-fork-of-a-repository-to-keep-it-up-to-date-with-the-upstream-repository</id>
    <content type="html"><![CDATA[<h1>1. Configuring a remote for a fork</h1>

<p>To sync changes you make in a fork with the original repository, you must configure a remote that points to the upstream repository in Git.</p>

<h2>1.1 Open Terminal (for Mac users) or the command prompt (for Windows and Linux users)</h2>

<h2>1.2 List the current configured remote repository for your fork</h2>

<pre><code>$ git remote -v
  origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
  origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
</code></pre>

<h2>1.3 Specify a new remote upstream repository that will be synced with the fork</h2>

<pre><code>$ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git
</code></pre>

<h2>1.4 Verify the new upstream repository you&rsquo;ve specified for your fork</h2>

<pre><code>$ git remote -v
  origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
  origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
  upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)
  upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)
</code></pre>

<h1>2. Syncing a fork</h1>

<p>Sync a fork of a repository to keep it up-to-date with the upstream repository</p>

<p>2.1 Change the current working directory to your local project</p>

<p>2.2 Fetch the branches and their respective commits from the upstream repository. Commits to master will be stored in a local branch, upstream/master.</p>

<pre><code>$ git fetch upstream
  remote: Counting objects: 75, done.
  remote: Compressing objects: 100% (53/53), done.
  remote: Total 62 (delta 27), reused 44 (delta 9)
  Unpacking objects: 100% (62/62), done.
  From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY
   * [new branch]      master     -&gt; upstream/master
</code></pre>

<p>2.3 Check out your fork&rsquo;s local master branch</p>

<pre><code>$ git checkout master
  Switched to branch 'master'
</code></pre>

<p>2.4 Merge the changes from upstream/master into your local master branch. This brings your fork&rsquo;s master branch into sync with the upstream repository, without losing your local changes.</p>

<pre><code>$ git merge upstream/master
  Updating a422352..5fdff0f
  Fast-forward
  README                    |    9 -------
  README.md                 |    7 ++++++
  2 files changed, 7 insertions(+), 9 deletions(-)
  delete mode 100644 README
  create mode 100644 README.md
</code></pre>

<p>2.5 If your local branch didn&rsquo;t have any unique commits, Git will instead perform a &ldquo;fast-forward&rdquo;:</p>

<pre><code>$ git merge upstream/master
  Updating 34e91da..16c56ad
  Fast-forward
  README.md                 |    5 +++--
  1 file changed, 3 insertions(+), 2 deletions(-)
</code></pre>

<h1>3. Pushing to a remote</h1>

<pre><code>$ git push  &lt;REMOTENAME&gt; &lt;BRANCHNAME&gt;   
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding an Existing Project to Github]]></title>
    <link href="http://jordonwu.github.io/blog/2015/05/26/adding-an-existing-project-to-github/"/>
    <updated>2015-05-26T08:12:55+08:00</updated>
    <id>http://jordonwu.github.io/blog/2015/05/26/adding-an-existing-project-to-github</id>
    <content type="html"><![CDATA[<p>Ref: <a href="https://help.github.com/articles/pushing-to-a-remote/">https://help.github.com/articles/pushing-to-a-remote/</a></p>

<h1>1. Create a new repository on Github</h1>

<pre><code>Example repo: https://github.com/github-username/test-repo.git

#To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub
</code></pre>

<h1>2. Create a local repository on local machine</h1>

<pre><code>$ mkdir test-repo
$ cd test-repo
$ git init
$ git config --global user.name "Your Name"         # remove --global for current git reop only
$ git config --global user.email you@example.com    # remove --global for current git reop only
$ git config --list                                 # list config
$ touch test.txt
$ git add .
$ git commit -m "First commit"
</code></pre>

<h1>3. Adding a remote repository url to local repository</h1>

<pre><code>$ git remote -v

$ git remote add origin https://github.com/github-username/test-repo.git
or
$ git remote set-url origin https://github.com/github-username/test-repo.git    # for windows git command

$ git remote -v
    origin  https://github.com/github-username/test-repo.git (fetch)
    origin  https://github.com/github-username/test-repo.git (push)
</code></pre>

<h1>4. Push the changes in your local repository to Github</h1>

<pre><code>$ git push origin master
</code></pre>

<h1>5. Renaming branches (remote)</h1>

<p>To rename a branch, you&rsquo;d use the same git push command, but you would add one more argument: the name of the new branch. For example:</p>

<pre><code>git push  &lt;REMOTENAME&gt; &lt;LOCALBRANCHNAME&gt;:&lt;REMOTEBRANCHNAME&gt;
</code></pre>

<p>This pushes the LOCALBRANCHNAME to your REMOTENAME, but it is renamed to REMOTEBRANCHNAME.</p>

<h1>6. Pushing tags</h1>

<p>By default, and without additional parameters, git push sends all matching branches that have the same names as remote branches.</p>

<p>To push a single tag, you can issue the same command as pushing a branch:</p>

<pre><code>git push  &lt;REMOTENAME&gt; &lt;TAGNAME&gt;
</code></pre>

<p>To push all your tags, you can type the command:</p>

<pre><code>git push  &lt;REMOTENAME&gt; --tags
</code></pre>

<h1>7. Deleting a remote branch or tag</h1>

<p>The syntax to delete a branch is a bit arcane at first glance:</p>

<pre><code>git push  &lt;REMOTENAME&gt; :&lt;BRANCHNAME&gt; 
</code></pre>

<p>Note that there is a space before the colon. The command resembles the same steps you&rsquo;d take to rename a branch. However, here, you&rsquo;re telling Git to push nothing into BRANCHNAME on REMOTENAME. Because of this, git push deletes the branch on the remote repository.</p>

<h2>7.1 Deleting your master branch</h2>

<p>You’ve forked some project on github.</p>

<p>You clone your fork.</p>

<p>Now you’ve got a master branch. It’s the master branch of your fork.</p>

<p>It can be tempting to do work in the master branch and ask for a pull request.</p>

<p>That is best avoided because:</p>

<p>It’s natural to carry on working in your master and that will pollute your pull request with other commits
master is not a descriptive name for a set of changes. It’s easier for the person reviewing your code to have something like fix-for-issue-12.
You may well also have a tracking branch pointing to the main upstream repo. You might call that something like upstream-master. It’s easy to lose concentration and forget you are on upstream-master instead of your master, and nasty errors can result.
To avoid this, I delete the master branch from my forked copy. However, to make that work, you have to tell github not to monitor your master branch.</p>

<h2>7.2 How to delete master</h2>

<p>First you delete master in your local clone. To do this we first make a new branch called placeholder or similar, and delete master from there:</p>

<pre><code>git branch placeholder
git checkout placeholder
git branch -D master
</code></pre>

<p>All good so far. We next want to delete the branch on github. However, if we do this the naive way:</p>

<pre><code>git push origin :master
</code></pre>

<p>we just get an error like this:</p>

<pre><code>remote: error: refusing to delete the current branch: refs/heads/master
To git@github.com:matthew-brett/datarray.git
! [remote rejected] master (deletion of the current branch prohibited)
error: failed to push some refs to 'git@github.com:matthew-brett/datarray.git'
</code></pre>

<p>That is because github is looking at the master branch to provide the web content when you browse that repository. So we first have to make github look at our placeholder branch instead, then delete master.</p>

<p>First push up the placeholder branch:</p>

<pre><code>git checkout placeholder # if not on placeholder already
git push origin placeholder
</code></pre>

<p>Then set placeholder to be the github default branch. Go to the main github page for your forked repository, and click on the “Admin” button.</p>

<p>There’s a “Default branch” dropdown list near the top of the screen. From there, select placeholder. On the interface I’m looking at, a green tick appears above the dropdown list. Now you can do (from the command line):</p>

<pre><code>git push origin :master
</code></pre>

<p>and - no master branch&hellip;</p>

<h1>8. Remotes and forks</h1>

<p>You might already know that you can &ldquo;fork&rdquo; repositories on GitHub.</p>

<p>When you clone a repository you own, you provide it with a remote URL that tells Git where to fetch and push updates. If you want to collaborate with the original repository, you&rsquo;d add a new remote URL, typically called upstream, to your local Git clone:</p>

<pre><code>git remote set-url upstream  &lt;THEIR_REMOTE_URL&gt;
</code></pre>

<p>Now, you can fetch updates and branches from their fork:</p>

<pre><code>git fetch upstream branch
# Grab the upstream remote's branches
# remote: Counting objects: 75, done.
# remote: Compressing objects: 100% (53/53), done.
# remote: Total 62 (delta 27), reused 44 (delta 9)
# Unpacking objects: 100% (62/62), done.
# From https://github.com/octocat/repo
#  * [new branch]      master     -&gt; upstream/master
</code></pre>

<p>When you&rsquo;re done making local changes, you can push your local branch to GitHub and initiate a pull request.</p>
]]></content>
  </entry>
  
</feed>
